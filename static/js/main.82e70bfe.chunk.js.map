{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","value","onChange","e","console","log","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","TodoList","map","todo","key","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gNAgCeA,EA7BF,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,SAY3C,OACI,8BACF,2BAAOC,MAAQJ,EAAWK,SAbH,SAACC,GACtBC,QAAQC,IAAIF,EAAEG,OAAOL,OACrBH,EAAaK,EAAEG,OAAOL,QAWgCM,KAAK,OAAOC,UAAU,eAC9E,4BAAQC,QATgB,SAACN,GACzBA,EAAEO,iBACFV,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAACY,KAAMd,EAAWe,WAAW,EAAOC,GAAkB,IAAdC,KAAKC,aACjEjB,EAAa,KAMuBU,UAAU,cAAcD,KAAK,UAC/D,uBAAGC,UAAU,wBAEf,yBAAKA,UAAU,UACb,4BAAQQ,KAAK,QAAQR,UAAU,eAC7B,4BAAQP,MAAM,OAAd,OACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,eAAd,mBCXKgB,EAXH,SAAC,GAAW,IAAVN,EAAS,EAATA,KACV,OAEI,yBAAKH,UAAW,QACZ,wBAAIA,UAAY,aAAaG,GAC7B,4BAAQH,UAAY,gBAAe,uBAAGA,UAAY,gBAAf,KAAnC,KACA,4BAAQA,UAAY,aAAY,uBAAGA,UAAY,gBAAf,KAAhC,OCKGU,EAVE,SAAC,GAAa,IAAZnB,EAAW,EAAXA,MACf,OACI,yBAAKS,UAAY,kBACb,wBAAIA,UAAY,aACfT,EAAMoB,KAAI,SAAAC,GAAI,OAAK,kBAAC,EAAD,CAAMC,IAAOD,EAAKP,GAAIF,KAAOS,EAAKT,aCWnDW,MAdf,WAAgB,IAAD,EACoBC,mBAAS,IAD7B,mBACN1B,EADM,KACIC,EADJ,OAEYyB,mBAAS,IAFrB,mBAENxB,EAFM,KAECC,EAFD,KAGb,OACE,yBAAKQ,UAAY,OACf,gCACE,0CAEF,kBAAC,EAAD,CAAMX,UAAYA,EAAWC,aAAcA,EAAcC,MAAQA,EAAOC,SAAYA,IACpF,kBAAC,EAAD,CAAUD,MAAQA,MCFJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.82e70bfe.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Form = ({inputText, setInputText, todos, setTodos}) =>{\n    const inputTextHandler = (e)=>{\n        console.log(e.target.value)\n        setInputText(e.target.value)\n    };\n\n    const submitTodoHandler = (e) =>{\n      e.preventDefault();\n      setTodos([...todos, {text: inputText, completed: false, id: Math.random()*1000}]);\n      setInputText('');\n    }\n\n    return(\n        <form>\n      <input value ={inputText} onChange = {inputTextHandler} type=\"text\" className=\"todo-input\" />\n      <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\n        <i className=\"fas fa-plus-square\"></i>\n      </button>\n      <div className=\"select\">\n        <select name=\"todos\" className=\"filter-todo\">\n          <option value=\"all\">All</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"uncompleted\">Uncompleted</option>\n        </select>\n      </div>\n    </form>\n    )\n}\n\nexport default Form\n","import React from 'react'\n\n\nconst Todo =({text}) =>{\n    return (\n       \n        <div className ='todo'>\n            <li className = 'todo-item'>{text}</li>\n            <button className = 'complete-btn'><i className = 'fas fa-check'> </i> </button>\n            <button className = 'trash-btn'><i className = 'fas fa-trash'> </i> </button> \n        </div>\n    )\n}\n\nexport default Todo","import React from 'react'\nimport Todo from './Todo'\n\n\nconst TodoList = ({todos}) => {\n    return (\n        <div className = 'todo-container'>\n            <ul className = 'todo-list'>\n            {todos.map(todo => (<Todo key = {todo.id} text ={todo.text}/>))}\n            </ul>\n        </div>\n    )\n}\n\nexport default TodoList;","import React,{useState} from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  const [inputText,setInputText] = useState('');\n  const [todos, setTodos] =useState([]);\n  return (\n    <div className = 'App'>\n      <header>\n        <h1>Todo List</h1>\n      </header>\n      <Form inputText ={inputText} setInputText={setInputText} todos ={todos} setTodos = {setTodos}/>\n      <TodoList todos ={todos}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}